from ultralytics import YOLO
from flask import Flask, request, jsonify
import threading
import time
from flask_cors import CORS
from PIL import Image
import io
import cv2
import numpy as np
import math
import boto3
from datetime import datetime

app = Flask(__name__)
CORS(app)
lock = threading.Lock()

#
s3 = boto3.client(
    's3',
    aws_access_key_id='',   
    aws_secret_access_key=''
)

# 클래스 이름과 우선순위 정의 (우선순위가 높은 순서대로 배열)
classNames = ["Milk", "Scratch", "hole"]

# S3 클라이언트 생성
s3 = boto3.client('s3')

# YOLO 모델 로드
model = YOLO("/home/ubuntu/best.pt")

# S3 버킷 이름
S3_BUCKET_NAME = 'smartfactory-box-ec2-josub'

@app.route('/upload', methods=['POST'])
def upload_image():
    
    if 'file' not in request.files:
        return jsonify({'error': 'No file part in the request'}), 400

    file = request.files['file']
    if file.filename == '':
        return jsonify({'error': 'No selected file'}), 400

    detected_objects = []  # 감지된 객체를 저장할 리스트

    # 이미지를 메모리에서 읽어와 OpenCV 포맷으로 변환
    image = Image.open(io.BytesIO(file.read()))
    image_np = np.array(image)
    img = cv2.cvtColor(image_np, cv2.COLOR_RGB2BGR)  # OpenCV는 BGR 포맷을 사용

    # YOLO 모델로 이미지 감지 수행
    results = model(img)

    for r in results:
        boxes = r.boxes
        for box in boxes:
            # Confidence
            conf = math.ceil((box.conf[0] * 100)) / 100
            cls = int(box.cls[0])
            currentClass = classNames[cls]
            # Confidence threshold
            if conf > 0.5 and currentClass not in detected_objects:
                detected_objects.append(currentClass)

    # 우선순위에 따라 가장 중요한 객체만 남기기
    selected_object = None
    for class_name in classNames:
        if class_name in detected_objects:
            selected_object = class_name
            break

    detection_result = {
        'detected_object': selected_object
    }

    # S3에 이미지 업로드
    if selected_object:
        # 이미지 이름을 고유하게 생성 (예: timestamp를 사용)
        image_name = f"detected_{datetime.now().strftime('%Y%m%d%H%M%S')}.jpg"

        # 이미지를 JPEG 형식으로 메모리에 저장
        _, buffer = cv2.imencode('.jpg', img)
        image_io = io.BytesIO(buffer)

        # S3에 이미지 업로드
        s3.upload_fileobj(image_io, S3_BUCKET_NAME, image_name)
        
        # S3 URL 생성
        image_url = f"https://{S3_BUCKET_NAME}.s3.amazonaws.com/{image_name}"
        detection_result['image_url'] = image_url

    return jsonify(detection_result)

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=5000, threaded=True)
